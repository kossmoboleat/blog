---
layout: post
title: Learning Design Patterns
date: 2012-03-24 12:29:03.000000000 +01:00
---
Design Patterns are design solutions to recurring problems. The architect <a href="http://en.wikipedia.org/wiki/Christopher_Alexander">Christopher Alexander</a> introduced this notion in his book <a href="http://en.wikipedia.org/wiki/A_Pattern_Language">"A Pattern Language"</a>. He introduces patterns that range from the design of whole cities to the organization of single rooms. Here's how he defines the pattern of a "street cafe" (taken from <a href="http://en.wikipedia.org/wiki/A_Pattern_Language">Wikipedia</a>):

<blockquote>
"The street cafe provides a unique setting, special to cities: a place where people can sit lazily, legitimately, be on view, and watch the world go by... Encourage local cafes to spring up in each neighborhood. Make them intimate places, with several rooms, open to a busy path, where people can sit with coffee or a drink and watch the world go by. Build the front of the cafe so that a set of tables stretch out of the cafe, right into the street."
</blockquote>

The notion never really took off in architecture. Only Alexander himself and some experimental architects employed them in their projects. In the software engineering scene the concept was widely successful and the <a href="http://c2.com/cgi/wiki?GangOfFour">"gang of four"</a> (Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides) collected 23 patterns in their book "<a href="http://www.amazon.de/gp/product/0201633612/ref=as_li_ss_tl?ie=UTF8&tag=timben08-21&linkCode=as2&camp=1638&creative=19454&creativeASIN=0201633612">Design Patterns: Elements of Reusable Object-Oriented Software</a><img src="http://www.assoc-amazon.de/e/ir?t=timben08-21&l=as2&o=3&a=0201633612" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />". The book was highly successful and influenced the software design of many object-oriented software libraries and frameworks and even programming languages themselves (think <a href="http://en.wikipedia.org/wiki/Iterator_pattern">iterator</a>). 

<a href="http://www.amazon.de/gp/product/0201633612/ref=as_li_ss_il?ie=UTF8&tag=timben08-21&linkCode=as2&camp=1638&creative=19454&creativeASIN=0201633612"><img border="0" src="http://ws.assoc-amazon.de/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0201633612&MarketPlace=DE&ID=AsinImage&WS=1&tag=timben08-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.de/e/ir?t=timben08-21&l=as2&o=3&a=0201633612" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

Like any trend that comes up in the fast-moving scene of software development, it has many ardent supporters and equally many burning opponents. Its critics claim that it's just another buzz word with no real content like many other trends invented by marketing departments. More to the point they claim, that it gives many people a false sense of security when designing a complex software system. Instead of solving real design problems it allows a software engineer to hide behind vocabulary that only gives the illusion of real understanding.

<a href="https://picasaweb.google.com/lh/photo/AaNoZ0aGyPmYBLTzByFV5e2EGA1nW5lTUuZoiRuRNFY?feat=directlink"><img src="https://lh4.googleusercontent.com/-t_c958Lxa6Q/T22SqJLaObI/AAAAAAAAEfM/GnCgFIPcuTo/s640/tool%2520collection.jpg" alt="" /></a>

It's hard to refute a criticism on this basic level, but you can see the advantages of patterns in their overall properties. Flexibility, loose coupling, encapsulation, ease of change with new requirements are just some of them. For me design patterns are just one more tool, that we can use when designing software. Like with any tool there's a time to use it and a time to just <a href="http://en.wikipedia.org/wiki/KISS_principle">"keep it simple, stupid"</a> and go with the straightforward solution. There's a <a href="http://www.bluegraybox.com/blog/2004/12/02/picture-hanging/">great article</a> by Colin MacDonald, that tells a compelling story about a young programmer, that is a little to eager to use all the tools.

I just recently finished learning design patterns in a more structured way by reading "<a href="http://www.amazon.de/gp/product/0596007124/ref=as_li_ss_tl?ie=UTF8&tag=timben08-21&linkCode=as2&camp=1638&creative=19454&creativeASIN=0596007124">Head First Design Patterns</a><img src="http://www.assoc-amazon.de/e/ir?t=timben08-21&l=as2&o=3&a=0596007124" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />" by Elisabeth & Eric Freeman, Bert Bates, Kathy Sierra and Elisabeth Robson. The book manages to convey the intention of the most used original design patterns in a way that is easier to digest than the dry dictionary style used in the <a href="http://www.amazon.de/gp/product/0201633612/ref=as_li_ss_il?ie=UTF8&tag=timben08-21&linkCode=as2&camp=1638&creative=19454&creativeASIN=0201633612"><img border="0" src="http://ws.assoc-amazon.de/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=0201633612&MarketPlace=DE&ID=AsinImage&WS=1&tag=timben08-21&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.de/e/ir?t=timben08-21&l=as2&o=3&a=0201633612" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> on design patterns by the gang of four. The Head First book is on top of many of the Top 10 book any programmer should read, but the book's comic and verbose style takes some getting used to. At first I was most appalled how often they use Comic Sans, but I assure you that the content is good and it's unique style manages to ease the study of these rather dry concepts. Jeff Atwood <a href="http://www.codinghorror.com/blog/2005/09/head-first-design-patterns.html">critiques</a> the book in a nice rant, but I find it a little bit too opinionated to be taken much more seriously than a trolling attempt.
